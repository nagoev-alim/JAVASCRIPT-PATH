import './style.css';
import { getRandomNumber } from './utils/getRandomNumber';
import Toastify from 'toastify-js';
import 'toastify-js/src/toastify.css';
import confetti from 'canvas-confetti';

/**
 * –ö–ª–∞—Å—Å GuessNumber –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
 */
class GuessNumber {
  private form: HTMLFormElement | null = null;
  private input: HTMLInputElement | null = null;
  private output: HTMLUListElement | null = null;
  private username: string = '';
  private attemptsQuantity: number = 0;
  private secret: number = getRandomNumber(1, 100);

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ GuessNumber –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É.
   */
  constructor() {
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—è DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
   */
  private initialize() {
    this.createDOM();
    this.setupEventListeners();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã.
   */
  private createDOM() {
    const root = document.querySelector<HTMLDivElement>('#app');
    if (!root) return;

    root.innerHTML = `
      <div class='p-4 text-yellow-400 grid gap-3'>
        <h1 class='font-bold text-2xl md:text-5xl'>üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</h1>
        <ul class='grid gap-2' data-output></ul>
        <form data-form>
          <label>
            <input class='bg-transparent outline-none border-b-2 border-yellow-400 px-3 py-2.5 ' type='text' name='guess' data-input>
          </label>
        </form>
      </div>
    `;
    this.form = root.querySelector<HTMLFormElement>('[data-form]');
    this.input = root.querySelector<HTMLInputElement>('[data-input]');
    this.output = root.querySelector<HTMLUListElement>('[data-output]');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –∏ —Ñ–æ—Ä–º—ã.
   */
  private setupEventListeners(): void {
    this.input?.focus();
    this.showMessage('üë® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
    this.form?.addEventListener('submit', this.handleSubmit.bind(this));
    console.log(`–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ${this.secret}`);
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
   */
  private showMessage(message: string) {
    const li = document.createElement('li');
    li.classList.add('text-xl');
    li.innerHTML = message;
    this.output?.appendChild(li);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.
   */
  private handleInvalidInput() {
    Toastify({
      text: '‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ',
      className: 'bg-none shadow-none bg-orange-100 text-black border border-orange-200',
      duration: 2000,
      gravity: 'bottom',
      position: 'center',
    }).showToast();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
   */
  private handleSubmit(event: Event) {
    event.preventDefault();
    const form = event.target as HTMLFormElement;
    const value = form.guess.value.trim();

    if (!value) {
      this.handleInvalidInput();
      return;
    }

    if (!this.username) {
      this.username = value;
      this.output!.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      this.showMessage(`üë® ${value}, there is a number between 0 and 100. Try to guess it in the fewest number of tries. After each attempt, there will be a message with the text - 'Few', 'Many' or 'Right'.'`);
      this.input!.value = '';
      this.input!.setAttribute('type', 'number');
      return;
    }

    const guess = Number.parseInt(value);
    if (isNaN(guess)) {
      this.handleInvalidInput();
      return;
    }

    this.showMessage(value);
    this.attemptsQuantity++;

    if (guess !== this.secret) {
      this.showMessage(guess > this.secret ? '‚¨áÔ∏è Many. Try again üò∏' : '‚¨ÜÔ∏è Few. Try again üò∏');
    } else {
      this.showMessage(`üéä Right. The number you've guessed: ${guess}`);
      this.showMessage(`üéâ Number of attempts: ${this.attemptsQuantity}`);
      confetti({
        angle: getRandomNumber(55, 125),
        spread: getRandomNumber(50, 70),
        particleCount: getRandomNumber(50, 100),
        origin: { y: 0.6 },
      });
      form.remove();
    }

    this.input!.value = '';
  }
}

new GuessNumber();
