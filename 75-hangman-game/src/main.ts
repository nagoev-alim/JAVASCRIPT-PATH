import './style.scss';
import mock from '../src/mock/index';
import { toast } from './utils/toast.ts';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–æ–¥—Å–∫–∞–∑–∫—É.
 * @interface
 */
interface IWord {
  word: string;  // –°–ª–æ–≤–æ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
  hint: string;  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å–ª–æ–≤–∞
}

/**
 * –ö–ª–∞—Å—Å Hangman –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞".
 */
class Hangman {
  /**
   * @private
   * @type {HTMLDivElement}
   * –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ–≤–∞.
   */
  private word: HTMLDivElement;

  /**
   * @private
   * @type {HTMLDivElement}
   * –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ —Å–ª–æ–≤—É.
   */
  private hint: HTMLDivElement;

  /**
   * @private
   * @type {HTMLDivElement}
   * –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±—É–∫–≤.
   */
  private wrongLettersEl: HTMLDivElement;

  /**
   * @private
   * @type {NodeListOf<HTMLElement>}
   * –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ñ–∏–≥—É—Ä—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞.
   */
  private figureParts: NodeListOf<HTMLElement>;

  /**
   * @private
   * @type {HTMLButtonElement}
   * –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.
   */
  private btnPlay: HTMLButtonElement;

  /**
   * @private
   * @type {IWord}
   * –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞.
   */
  private selectedWord: IWord = mock[Math.floor(Math.random() * mock.length)];

  /**
   * @private
   * @type {string[]}
   * –ú–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤.
   */
  private correctLetters: string[] = [];

  /**
   * @private
   * @type {string[]}
   * –ú–∞—Å—Å–∏–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±—É–∫–≤.
   */
  private wrongLetters: string[] = [];

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Hangman –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É.
   */
  constructor() {
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—è DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞.
   * @private
   */
  private initialize(): void {
    this.createDOM();
    this.setupEventListeners();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä—ã.
   * @private
   */
  private createDOM(): void {
    const root = document.querySelector('#app') as HTMLDivElement;
    if (!root) return;

    root.innerHTML = `
      <div class='grid items-start gap-3 game'>
        <h1 class='font-bold text-2xl md:text-4xl'>Hangman</h1>
        <p>Find the hidden word - Enter a letter</p>
        <div class='content bg-white max-w-md mx-auto border rounded'>
          <div data-hint></div>
          <svg height='250' width='200' class='figure'>
            <line x1='60' y1='20' x2='140' y2='20' />
            <line x1='140' y1='20' x2='140' y2='50' />
            <line x1='60' y1='20' x2='60' y2='230' />
            <line x1='20' y1='230' x2='100' y2='230' />
            <circle cx='140' cy='70' r='20' class='figure__part' />
            <line x1='140' y1='90' x2='140' y2='150' class='figure__part' />
            <line x1='140' y1='120' x2='120' y2='100' class='figure__part' />
            <line x1='140' y1='120' x2='160' y2='100' class='figure__part' />
            <line x1='140' y1='150' x2='120' y2='180' class='figure__part' />
            <line x1='140' y1='150' x2='160' y2='180' class='figure__part' />
          </svg>
          <div class='wrong-letters'>
            <p class='h5 hidden'>Wrong letters:</p>
            <div data-wrong-letters></div>
          </div>
          <div class='word' data-word></div>
          <button  data-play class='hidden px-3 py-2 border hover:bg-slate-50'>Play Again</button>
        </div>
      </div>
    `;
    this.word = root.querySelector('[data-word]')!;
    this.hint = root.querySelector('[data-hint]')!;
    this.wrongLettersEl = root.querySelector('[data-wrong-letters]')!;
    this.figureParts = root.querySelectorAll('.figure__part')!;
    this.btnPlay = root.querySelector('[data-play]')!;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã.
   * @private
   */
  private setupEventListeners(): void {
    this.displayWord();
    window.addEventListener('keydown', this.handleKeyDown.bind(this));
    this.btnPlay.addEventListener('click', () => location.reload());
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∫—Ä—ã—Ç–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–æ–¥—Å–∫–∞–∑–∫—É.
   * @private
   */
  private displayWord(): void {
    console.log(`Hint:${this.selectedWord.word}`);

    this.hint.innerHTML = `<h3 class='font-bold'>üöÄ Hint:</h3> ${this.selectedWord.hint}`;
    this.word.innerHTML = `${this.selectedWord.word.split('').map(letter => `<span class='bg-gray-100'>${this.correctLetters.includes(letter) ? letter : ''}</span>`).join('')}`;

    if (this.word.innerText.replace(/\n/g, '').toLowerCase() === this.selectedWord.word.toLowerCase()) {
      window.removeEventListener('keydown', this.handleKeyDown.bind(this));
      this.btnPlay.classList.remove('hidden');
      document.querySelector('.wrong-letters')!.style.display = 'none';
      document.querySelector('.figure')!.style.display = 'none';
      toast('Congratulations! You won!', 'success');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
   * @param {Object} event - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏.
   * @private
   */
  private handleKeyDown(event: KeyboardEvent): void {
    const { keyCode, key } = event;

    if (keyCode >= 65 && keyCode <= 90) {

      if (this.selectedWord.word.includes(key)) {
        if (!this.correctLetters.includes(key)) {
          this.correctLetters.push(key);
          this.displayWord();
        } else {
          toast('You have already entered this letter', 'warning');
        }
      } else {
        if (!this.wrongLetters.includes(key)) {
          this.wrongLetters.push(key);
          this.updateLetters();
        } else {
          toast('You have already entered this letter', 'warning');
        }
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±—É–∫–≤ –∏ —Ñ–∏–≥—É—Ä—ã.
   * @private
   */
  private updateLetters(): void {
    if (this.wrongLetters.length > 0) {
      document.querySelector('.wrong-letters p')!.classList.remove('hidden');
    }
    this.wrongLettersEl.innerHTML = `${this.wrongLetters.map(letter => `<span class='h5'>${letter}</span>`).join('')}`;
    this.figureParts.forEach((part, index) => {
      part.style.display = index < this.wrongLetters.length ? 'block' : 'none';
    });
    if (this.wrongLetters.length === this.figureParts.length) {
      window.removeEventListener('keydown', this.handleKeyDown.bind(this));
      this.btnPlay.classList.remove('hidden');
      document.querySelector('.wrong-letters')!.style.display = 'none';
      document.querySelector('.figure')!.style.display = 'none';
      toast('Unfortunately you lost.', 'error');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
new Hangman();
