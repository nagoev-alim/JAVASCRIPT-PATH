import './style.scss';
import mock from '../src/mock/index.ts';
import { capitalStr } from './utils/capitalStr.ts';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–¥—É–∫—Ç–∞.
 * @property {string} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
 * @property {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫.
 * @property {string} company - –ö–æ–º–ø–∞–Ω–∏—è.
 * @property {string} image - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
 * @property {number} price - –¶–µ–Ω–∞.
 */
interface IProduct {
  id: string,
  title: string,
  company: string,
  image: string,
  price: number,
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
 */
class ProductsFilter {
  /**
   * –§–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
   * @private
   * @type {HTMLFormElement}
   */
  private form: HTMLFormElement;
  /**
   * –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
   * @private
   * @type {HTMLInputElement}
   */
  private search: HTMLInputElement;
  /**
   * –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
   * @private
   * @type {HTMLUListElement}
   */
  private list: HTMLUListElement;
  /**
   * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞.
   * @private
   * @type {HTMLDivElement}
   */
  private result: HTMLDivElement;
  /**
   * –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π.
   * @private
   * @type {HTMLUListElement}
   */
  private companies: HTMLUListElement;
  /**
   * –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
   * @private
   * @type {IProduct[]}
   */
  private products: IProduct[] = mock;

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ ProductsFilter.
   * @constructor
   */
  constructor() {
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å.
   * @private
   */
  private initialize(): void {
    this.createDOM();
    this.setupEventListeners();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
   * @private
   */
  private createDOM(): void {
    const root = document.querySelector('#app') as HTMLDivElement;
    if (!root) return;

    root.innerHTML = `
      <div class='max-w-6xl mx-auto w-full p-3 grid gap-4 items-start'>
        <h1 class='text-center font-bold text-2xl md:text-4xl'>Products Filter</h1>
        <div class='grid gap-3 xl:grid-cols-[300px_1fr] items-start'>
          <div class='grid gap-3'>
            <form data-form>
              <input class='px-3 py-2.5 border rounded bg-slate-50 focus:outline-none focus:border-blue-400 w-full' name='query' type='search' data-search placeholder='Search'>
            </form>
            <h5 class='font-medium text-sm'>Company</h5>
            <ul class='flex flex-wrap gap-2 xl:grid' data-companies></ul>
          </div>
          <div class='' data-result>
            <ul class='grid gap-3' data-products></ul>
          </div>
        </div>
      </div>
    `;

    this.form = root.querySelector('[data-form]')!;
    this.search = root.querySelector('[data-search]')!;
    this.list = root.querySelector('[data-products]')!;
    this.result = root.querySelector('[data-result]')!;
    this.companies = root.querySelector('[data-companies]')!;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
   * @private
   */
  private setupEventListeners(): void {
    this.renderProducts();
    this.renderCompanies();
    this.form.addEventListener('keyup', this.handleKeyUp.bind(this));
    this.companies.addEventListener('click', this.handleFilter.bind(this));
    this.search.addEventListener('search', this.handleSearch.bind(this));
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã.
   * @private
   */
  private renderProducts(): void {
    this.result.innerHTML = this.products.length === 0
      ? `<h5 class='font-medium'>üò© Sorry, no products matched your search</h5>`
      : `<ul class='grid gap-3 sm:grid-cols-2 md:grid-cols-3' data-products>
          ${this.products.map(({ id, title, image, price }: IProduct): string => `
        <li class='bg-white border rounded overflow-hidden' data-id='${id}'>
          <div class=''>
            <img class='max-h-[250px] min-h-[250px] object-cover w-full' src='${image}' alt='${title}'>
          </div>
          <div class='grid gap-3 p-3'>
            <h3 class='font-bold text-lg'>${title}</h3>
            <p>${price}</p>
          </div>
        </li>
      `).join('')}
    </ul>
    `;
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏.
   * @private
   */
  private renderCompanies(): void {
    this.companies.innerHTML =
      ['all', ...new Set(mock.map(({ company }) => company))]
        .map(company => `<li><button class='border px-3 py-1.5 xl:w-full xl:justify-start ${company === 'all' ? 'bg-slate-100' : 'bg-white'}' data-filter-btn data-id='${company}'>${capitalStr(company)}</button></li>`)
        .join('');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
   */
  private handleKeyUp(event: Event): void {
    const target = event.target as HTMLInputElement;
    this.companies.querySelectorAll('button').forEach(btn => btn.classList.add('bg-white'));
    this.products = mock.filter(({ title }) => title.toLowerCase().includes(target.value.toLowerCase()));
    this.renderProducts();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º.
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞.
   */
  private handleFilter(event: Event): void {
    const target = event.target as HTMLButtonElement;
    if (target.dataset.filterBtn === '') {
      this.companies.querySelectorAll('button').forEach(btn => btn.classList.add('bg-white'));
      target.classList.remove('bg-white');
      target.classList.add('bg-slate-100');
      this.products = target.dataset.id === 'all' ? mock : mock.filter(({ company }) => company === target.dataset.id);
      this.form.reset();
      this.renderProducts();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞.
   */
  private handleSearch(): void {
    this.products = mock;
    this.renderProducts();
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
new ProductsFilter();
